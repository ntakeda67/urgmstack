buildscript {
    ext {
        springBootVersion = '1.5.3.RELEASE'
        domaVersion = '2.16.0'
        springBootDomaVersion = '1.1.0'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply from: 'eclipse.gradle'
apply plugin: 'org.springframework.boot'

tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    runtime('org.springframework.boot:spring-boot-devtools')
    runtime('org.postgresql:postgresql')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile "org.seasar.doma:doma:$domaVersion"
    compile "org.seasar.doma.boot:doma-spring-boot-starter:$springBootDomaVersion"
}

compileJava.dependsOn processResources
processResources.destinationDir = compileJava.destinationDir

eclipse.project.name = 'sample-app'

springBoot {
    executable = true
}

task npmRunBuild {
    doLast {
        def npm = { ...args ->
            def command = ['npm']
            command += args.toList()
            new ProcessBuilder(command).directory(file('.')).start().waitForProcessOutput(System.out, System.err)
        }
        if (file('./node_modules').exists() ==  false) {
            npm('install')
        }
        npm('run', 'build')
    }
}
processResources.dependsOn npmRunBuild

